<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 width="100%"
		 backgroundColor="#2f3d46"
		 verticalScrollPolicy="off"
		 xmlns:observer="com.adobe.cairngorm.observer.*"
		 xmlns:utils="org.riateam.utils.*"
		 creationComplete="init()"
		 xmlns:ui="flash.ui.*"
		 xmlns:contextmenu="org.riateam.utils.managers.contextmenu.*"
		 xmlns:managers="org.riateam.utils.managers.*"
		 xmlns:spicefactory="http://www.spicefactory.org/parsley"
		 xmlns:menu="org.riateam.utils.managers.menu.*">
	<spicefactory:Configure/>
	<mx:Metadata>
		  [ManagedEvents("getPage")]
		[ManagedEvents("deletePage")]
		[ManagedEvents("savePage")]
		[ManagedEvents("publishPage")]
		[ManagedEvents("movePage")]  
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import org.riateam.utils.alert.CustomAlert;
			import org.riateam.utils.managers.CallbackManager;
			import scripts.Events.PageViewEvent;
			import scripts.Classes.PageDTO;
			import org.spicefactory.lib.logging.LogContext;
			import org.spicefactory.parsley.core.context.Context;
			import mx.controls.Tree;
			import mx.collections.IList;
			import mx.core.Application;
			import mx.core.IUIComponent;
			import mx.managers.DragManager;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import flash.utils.setTimeout;
			import mx.collections.XMLListCollection;
			import mx.events.ResizeEvent;
			import scripts.Events.TreeMenuEvent;
			import scripts.Services.TreeServices;
			import scripts.Model.Model;
			import scripts.Services.IPageServices;
			import mx.rpc.events.ResultEvent;


			// --------------------------------------------

			[Inject]
			public var pageService:IPageServices;

			[Inject]
			public var treeService:TreeServices;

			[Inject]
			[Bindable]
			public var model:Model;

			private function init():void
			{

			}

			public function getPage(selectedItem:Object):void
			{
				var page:PageDTO=PageDTO.createPageFromXML(myTree.selectedItem as XML);
				model.selectedPage=page;
				pageService.getPage(page);

			}

			[MessageHandler(selector="getTree")]
			public function treeGetHandler(event:TreeMenuEvent):void
			{
			/* for each (var item:XML in myTree.dataProvider.source)
			   {
			   if (item.children() != null)
			   {
			   expand(item.children());
			   myTree.expandItem(item, true);
			   }
			 } */
			}
			// --------------------------------------------

			[Embed("assets/file.png")]
			private var FileIcon:Class;

			[Embed("assets/fileno.GIF")]
			private var FilenoIcon:Class;

			private function tree_iconFunc(item:Object):Class
			{
				var iconClass:Class=FileIcon;
				var titolo:String=XML(item).@Titolo;
				switch (titolo)
				{
					case "DESCRIZIONE GENERALE":
						iconClass=FilenoIcon;
						break;
				}
				return iconClass;
			}

			/* private function expand(source:XMLList):void
			   {
			   for each (var item:XML in source)
			   {
			   if (item.children() != null)
			   {
			   expand(item.children());
			   myTree.expandItem(item, true);
			   }
			   }
			   }

			   private function collapse(source:XMLList):void
			   {
			   for each (var item:XML in source)
			   {
			   if (item.children() != null)
			   {
			   collapse(item.children());
			   myTree.expandItem(item, false);
			   }
			   }
			   myTree.selectedIndex=0;
			 } */


			private function onTreeResize(event:ResizeEvent):void
			{

			}

			private function showTree(event:*):void
			{
				/* delay construction avoid scolling bug */
				if (model.treeXML)
					setTimeout(startFading, 500);
			}

			private function startFading():void
			{
				fadeIn.play();
			}

			/****************************** DRAG n DROP ***************************/


			private function doDragEnter(event:DragEvent):void
			{
				// Cancel default behaviour
				event.preventDefault();
				// Tell the DragManager that the Tree will accent the DragDrop
				DragManager.acceptDragDrop(Tree(event.target));
				// hide the "drop line" that is shown in Tree control
				// when dropping in a Tree
				myTree.showDropFeedback(event);
			}

			private function doDragDrop(event:DragEvent):void
			{
				var item:XML;
				// cancel default
				event.preventDefault();

				// get the drag format (its always items in our case
				// when you are dragging FROM a Tree its treeItems
				var draggedFormat:String=event.dragSource.formats[0];

				// Get the dragged items
				var draggedItems:Array=event.dragSource.dataForFormat(draggedFormat) as Array;

				// Calculate the index in the Tree where the items were dropped 
				var dropIndex:int=myTree.calculateDropIndex(event);

				// Set the selected index of the Tree to the dropIndex

				// Add the new object to the drop target.      

				myTree.selectedIndex=dropIndex;

				// Check if we are dropping on a node

				// Add each dragged item to the Tree by apppending it
				// as a child of the selected node in the Tree.
			/* for each (var object:Object in draggedItems)
			   {
			   // create item
			   item=<item></item>;
			   // set the name
			   item.@Titolo=object.Titolo;

			   // use appendChild to add the item.
			   // (if selected item is an item then append to parent)
			   if ((myTree.selectedItem as XML).name() == "Item")
			   {
			   (myTree.selectedItem as XML).appendChild(item);
			   }
			   else
			   {
			   (myTree.selectedItem as XML).parent().appendChild(item);
			   }
			 } */
			}

			private function doDragOver(event:DragEvent):void
			{
				// Show the default "drop line" in the Tree control
				myTree.showDropFeedback(event);
				// Cancel default behavious
				event.preventDefault();
			}

			private function doDragExit(event:DragEvent):void
			{
				// hide the "drop line" that is shown in Tree control
				// when dropping in a Tree
				myTree.selectedIndex=myTree.calculateDropIndex(event);
				myTree.hideDropFeedback(event);
			}

			private var itemDragged:XML;
			private function doDragStart(event:DragEvent):void
			{
				// hide the "drop line" that is shown in Tree control
				// when dropping in a Tree
		//		myTree.hideDropFeedback(event);
			//	var x:XMLList = event.currentTarget as XMLList;
			itemDragged = myTree.selectedItem as XML;
			}
			private function doDragComplete(event:DragEvent):void
			{
				// hide the "drop line" that is shown in Tree control
				// when dropping in a Tree
				myTree.hideDropFeedback(event);
				getPosition(itemDragged);
				
			}

			private function getPosition(xml:XML):Boolean
			{
				var cn:XMLList=XMLList(xml.parent()).children();

				xml.@Parentpageid = XML(xml.parent()).@Pageid;
				
				for (var i:Number=0; i < cn.length(); i++)
				{
					if (cn[i] == xml)
					{
						xml.@Position = i + 1;
						var selectedPage:PageDTO=PageDTO.createPageFromXML(xml as XML);
						return true;
					}
				}
				return false;
			}

			/************************ ContextMenu Handlers  ***************************/

			private function doSelect(evt:Event):void
			{
				myTree.selectedIndex=lastRollOverIndex;
			}

			private function doCopy(evt:Event):void
			{
//				var selectedPage:PageDTO=PageDTO.createPageFromXML(myTree.selectedItem as XML);

				var pageid:int=int(myTree.selectedItem.@Pageid);
				LogContext.getLogger(this.className).debug("Call Copy " + pageid);
				var selectedPage:PageDTO=PageDTO.createPageFromXML(myTree.selectedItem as XML);
				selectedPage.Deleted=true;
				pageService.deletePage(selectedPage);
			}

			private function doDelete(evt:Event):void
			{
				
				var selectedPage:PageDTO=PageDTO.createPageFromXML(myTree.selectedItem as XML);

				if ( selectedPage.State == 99 ){
					Alert.show("Non puoi cancellare il cestino");
					return;
				}

				/* var errorDetailedView:CustomAlert=new CustomAlert();
				   errorDetailedView.ErrorMessage="Conferma";
				   errorDetailedView.ErrorMessageDetailed="Eliminare l'elemento \n" + selectedPage.Title

				   PopUpManager.addPopUp(errorDetailedView, Application.application.appContainer, true);
				 PopUpManager.centerPopUp(errorDetailedView); */

				Alert.show("Eliminare l'elemento: \n" + selectedPage.Title, "Confermi?", Alert.YES | Alert.NO, Application.application.appContainer, deleteItem);

			}

			private function deleteItem(event:CloseEvent):void
			{
				if (event.detail == Alert.YES)
				{
					var pageid:int=int(myTree.selectedItem.@Pageid);
					LogContext.getLogger(this.className).debug("Call Delete " + pageid);
					var selectedPage:PageDTO=PageDTO.createPageFromXML(myTree.selectedItem as XML);
					selectedPage.Deleted=true;
					pageService.deletePage(selectedPage);
				}

			}

			private function doPreview(evt:Event):void
			{

				CallbackManager.showFancyBox("http://google.com", "test");

			}

			[MessageHandler(selector="deletePage")]
			public function deleteItemSuccess(event:PageViewEvent):void
			{
				LogContext.getLogger(this.className).debug("Response Delete " + event.page.Title);
				if (!event.page.IsPersisted)

				{
					xmlDeleteNode(myTree.selectedItem as XML);
				}
				else
				{
					Alert.show("Errore cancellazione", "Attenzione");

				}
			}

//			private function xmlMove(xmlToDelete:XML):Boolean
//			{
//				var cn:XMLList=myTree.dataProvider.source as XMLList;
//
//				var newXml = xmlToDelete.copy();
//				for (var i:Number=0; i < cn.length(); i++)
//				{
//					if (cn[i].@State == "99")
//					{
//						(cn[i] as XML).appendChild(newXml);
//						return true;
//					}
//				}		
//				return false;		
//			}

			private function xmlDeleteNode(xmlToDelete:XML):Boolean
			{
				var cn:XMLList=XMLList(xmlToDelete.parent()).children();

				for (var i:Number=0; i < cn.length(); i++)
				{
					if (cn[i] == xmlToDelete)
					{
//						xmlMove(cn[i]);
						delete cn[i];
						return true;
					}
				}
				return false;
			}

			[Bindable]
			private var lastRollOverIndex:int;
		]]>
	</mx:Script>
	<menu:ContextMenuManager id="context"
		             			 onCopy="doCopy(event)"
								 onDelete="doDelete(event)"
								 onSelect="doSelect(event)"
								 onPreview="doPreview(event)"/>
								 
	<mx:Fade id="fadeIn"
			 duration="500"
			 target="{myTreeContainer}"
			 alphaTo="1"/>
	<observer:Observe source="{model.treeXML}"
					  handler="showTree"/>


	<mx:HTTPService id="service"
					url="http://www.provider.welsy.org/content.xml"
					showBusyCursor="true"
					resultFormat="e4x"
					useProxy="false"
					method="POST"/>
	<mx:VBox id="myTreeContainer"
			 width="100%"
			 paddingBottom="10"
			 paddingTop="10"
			 borderStyle="solid"
			 verticalScrollPolicy="off"
			 alpha="0">

		<utils:AutoSizingTree id="myTree"
							  itemRollOver="lastRollOverIndex = event.rowIndex"
							  contextMenu="{context.cm}"
							  styleName="treeMenuStyle"
							  rowHeight="18"
							  backgroundAlpha="0"
							  resize="onTreeResize(event)"
							  openItems="{model.treeXML..PAGE}"
							  width="100%"
							  horizontalCenter="0"
							  dataProvider="{model.treeXML.PAGE}"
							  labelField="@Publictitle"
							  iconFunction="tree_iconFunc"
							  dragOver="doDragOver(event)"
							  dragEnter="doDragEnter(event)"
							  dragExit="doDragExit(event)"
							  dragComplete="doDragComplete(event)"
							  dragStart="doDragStart(event)"
							  dragEnabled="true"
							  dragMoveEnabled="true"
							  dropEnabled="true"
							  change="getPage(myTree.selectedItem)"/>
	</mx:VBox>


</mx:VBox>
